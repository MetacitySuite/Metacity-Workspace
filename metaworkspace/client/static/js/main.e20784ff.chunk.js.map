{"version":3,"sources":["url.tsx","axios.tsx","screens/elements/header.tsx","screens/home.tsx","screens/elements/projectrename.tsx","screens/elements/projectdelete.tsx","screens/elements/layerrename.tsx","screens/elements/layerdelete.tsx","screens/elements/layers.tsx","screens/elements/projectrecompile.tsx","screens/elements/projectactions.tsx","screens/elements/project.tsx","screens/elements/projectadd.tsx","screens/elements/projectlist.tsx","screens/login.tsx","screens/projects.tsx","screens/upload.tsx","screens/elements/jobs.tsx","screens/elements/log.tsx","screens/elements/logs.tsx","screens/jobs.tsx","engine/decoder.ts","engine/geometry.tsx","engine/models.tsx","engine/tile.tsx","engine/grid.tsx","engine/layer.tsx","engine/controls.tsx","engine/picker.tsx","engine/shaders.tsx","engine/style.tsx","engine/renderer.tsx","engine/engine.tsx","screens/view.tsx","app.tsx","index.tsx"],"names":["url","apiurl","iaxios","axios","create","authToken","localStorage","getItem","defaults","headers","common","Authorization","EvergreenReactRouterLink","props","Link","is","ReactRouterLink","Header","Pane","className","to","home","projects","jobs","Home","useState","setProjects","history","useHistory","useEffect","get","then","response","console","log","data","Heading","map","project","index","Button","height","onClick","push","RenameProjectDialog","nameref","createRef","status","setStatus","renameProject","e","preventDefault","name","current","value","post","old","new","setIsShown","onSubmit","catch","reject","isShown","Dialog","title","onConfirm","onCloseComplete","confirmLabel","TextInput","placeholder","ref","length","InlineAlert","intent","marginTop","DeleteProjectDialog","delete","Text","RenameLayerDialog","renameLayer","DeleteLayerDialog","Layers","layers","setLayers","undefined","editedLayer","setEditedLayer","renameDialogShown","setRenameDialogShown","deleteDialogShown","setDeleteDialogShown","loadLayers","projectName","Table","Head","TextHeaderCell","Body","layer","Row","paddingY","TextCell","size","IconButton","icon","EditIcon","TrashIcon","EmptyState","background","orientation","LayersIcon","color","iconBgColor","description","anchorCta","LinkButton","RecompileProjectDialog","ProjectActions","recompileDialogShown","setRecompileDialogShown","marginRight","iconBefore","AddToArtifactIcon","Tooltip","content","CubeIcon","StyleIcon","disabled","MergeColumnsIcon","Project","showProject","marginY","PresentationIcon","NameState","ProjectList","onAddDialog","AddIcon","Tablist","Tab","id","onSelect","isSelected","currentProject","AddProjectDialog","createProject","authUser","callback","Login","pass","event","formData","FormData","append","setItem","access_token","error","width","type","Projects","project_name","useParams","setCurrentProject","addDialogShown","setAddDialogShown","getProjects","lurl","justifyContent","alignItems","ProjectsIcon","Dropzone","useDropzone","acceptedFiles","getRootProps","getInputProps","files","file","submit","appearance","form","UploadLayer","progress","setProgress","uploading","setUploading","Spinner","padding","borderRadius","toFixed","layer_name","forEach","dataset","onUploadProgress","progressEvent","loaded","total","toast","JobList","update","setJobs","selectedJob","setSelectedJob","detailIsShown","setDetailIsShown","loadJobs","setTimeout","clearTimeout","SideSheet","preventBodyScrolling","job_id","src","enableClipboard","theme","base00","base01","base02","base03","base04","base05","base06","base07","base08","base09","base0A","base0B","base0C","base0D","base0E","base0F","job","ApplicationIcon","CodeIcon","ConsoleIcon","Log","contents","setContents","loadLog","Pre","split","line","LogList","logs","setLogs","selectedLog","setSelectedLog","loadLogs","marginBottom","flexBasis","Jobs","Decoder","model","blob","window","atob","len","Float64Array","BYTES_PER_ELEMENT","view","DataView","ArrayBuffer","array","Float32Array","p","it","totalStop","iteration","stepStop","Math","min","i","setUint8","charCodeAt","getFloat64","removed","offset","Int32Array","Uint32Array","itStep","getUint32","Uint8Array","buffer","capLeft","resolution","vertices","shift","PI","step","cos","sin","capRight","segment","geometry","concat","Model","renderer","mesh","pickingMesh","this","removeFrom","scene","pickingScene","remove","dispose","PolygonalModel","pickable","picker","offsetForLayer","base64tofloat32","base64toint32","attributes","oid","objectid","createGeometry","createMesh","createPickingMesh","changed","THREE","matlib","pickingMaterial","add","material","polygonSelectMaterial","polygonMaterial","receiveShadow","castShadow","setAttribute","computeVertexNormals","LineModel","lineMaterial","frustumCulled","instanceCount","LineProxyModel","overlay","source","Tile","bbox","brect","x","y","sourceFile","stopFlag","isVisible","models","Vector3","box","Vector2","forRender","stopRender","CancelToken","cancelToken","token","createModels","postRenderCheck","modeldata","deserializeModel","tags","proxy","cancel","toSpiral","level","max","abs","n","base","Grid","b","focusPoint","tileSize","tiles","visible_radius","visible","visibleSwap","zero2","tile_size","Infinity","Map","createTiles","Set","a","tiledata","idx","tile","set","fp","visibleTile","clone","divideScalar","floor","nvisibleTile","sub","equals","update_visibility","tmpVisible","trad","ceil","sid","subScalar","eid","addScalar","clear","has","LayerBase","grid","style","layout","point","focus","Layer","registerLayer","Overlay","target","MapControls","camera","domElement","up","screenSpacePanning","mouseButtons","LEFT","PAN","RIGHT","ROTATE","touches","ONE","TWO","DOLLY_ROTATE","zoomSpeed","dampingFactor","enableDamping","minDistance","minPolarAngle","OrbitControls","GPUPickHelper","pickingTexture","pixelBuffer","selected","offsets","maxOffest","range","entries","pixelRatio","getPixelRatio","setViewOffset","getContext","drawingBufferWidth","drawingBufferHeight","setRenderTarget","render","clearViewOffset","readRenderTargetPixels","MaterialLibrary","csm","side","setupMaterial","customUniforms","merge","phong","uniforms","selectedID","vertexShader","fragmentShader","lights","zoffset","LayerStyle","settings","apply","key","Style","styles","layerStyle","Renderer","canvas","controls","stats1","stats2","innerWidth","innerHeight","antialias","setupRenderer","setupLightsAndShadows","DOP_TSK_UlicUsPAKOM_l","Stats","showPanel","dom","cssText","document","body","appendChild","CSM","fade","mode","cascades","near","far","shadowBias","shadowMapSize","lightDirection","normalize","parent","margin","lightFar","lightNear","lightIntensity","setPixelRatio","devicePixelRatio","shadowMap","enabled","autoUpdate","setClearColor","setSize","setAnimationLoop","frame","needsUpdate","position","z","pick","layerAndOidForId","uniformsNeedUpdate","MetacityEngine","init","addEventListener","moved","focus_point","fp2","click","View","exit","location","reload","onDoubleClick","doubleclick","clientX","clientY","App","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","pauseOnHover","exact","path","ReactDOM","StrictMode","Provider","getElementById"],"mappings":"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","file":"static/js/main.e20784ff.chunk.js","sourcesContent":["\n\n\nexport const url = {\n    HOME: '/app',\n    LOGIN: '/app/login',\n    VIEWTEMPLATE: '/app/view/:project_name',\n    VIEW: '/app/view/',\n    PROJECTSTEMPLATE: '/app/projects/:project_name?',\n    PROJECTS: '/app/projects/',\n    JOBS: '/app/jobs',\n    UPLOADLAYERTEMPLATE: '/app/upload/:project_name',\n    UPLOADLAYER: '/app/upload/'\n};\n\nexport const apiurl = {\n    LISTPROJECT: '/api/projects',\n    ADDPROJECT: '/api/project',\n    EXISTSPROJECT: '/api/project/exists',\n    RENAMEPROJECT: '/api/project/rename',\n    DELETEPROJECT: '/api/project',\n    BUILDPROJECT: '/api/project/build',\n    LISTLAYER: '/api/layers',\n    ADDLAYER: '/api/layer',\n    RENAMELAYER: '/api/layer/rename',\n    DELETELAYER: '/api/layer',\n    LISTJOBS: '/api/jobs',\n    LISTLOGS: '/api/logs',\n    LOG: '/api/log',\n    AUTHUSER: '/auth/user',\n    TOKEN: '/auth/token',\n};\n","import axios from \"axios\";\n\nconst iaxios = axios.create({\n  //baseURL: \"http://127.0.0.1:5000\"\n});\n\n(function() { \n  let authToken = localStorage.getItem(\"JWT\");\n  if (authToken === null) {\n      // This means that there ISN'T JWT and no user is logged in.\n      iaxios.defaults.headers.common.Authorization = null;\n  } else {\n      // This means that there IS a JWT so someone must be logged in.\n      iaxios.defaults.headers.common.Authorization = `Bearer ${authToken}`;\n  }\n})();\n\nexport default iaxios;","import React from 'react'\nimport { Link as ReactRouterLink } from 'react-router-dom'\nimport { Link, Pane } from 'evergreen-ui'\nimport { url } from '../../url'\n\nexport const EvergreenReactRouterLink = (props: any) =>\n  <Link is={ReactRouterLink} {...props} />\n\n\ninterface IHeaderProps {\n    home?: boolean;\n    projects?: boolean;\n    jobs?: boolean;\n}\n\nexport function Header(props: IHeaderProps) {\n\n    return (\n        <Pane className=\"header\" >\n            <EvergreenReactRouterLink to={url.HOME} className={`headerLink ${props.home? 'selected' : ''}`}>Home</EvergreenReactRouterLink>\n            <EvergreenReactRouterLink to={url.PROJECTS} className={`headerLink ${props.projects? 'selected' : ''}`}>Projects</EvergreenReactRouterLink>\n            <EvergreenReactRouterLink to={url.JOBS} className={`headerLink ${props.jobs ? 'selected' : ''}`}>Jobs &amp; Logs</EvergreenReactRouterLink>\n        </Pane>\n    )\n}","import { Pane, Heading, Button, Paragraph, Link } from 'evergreen-ui'\nimport { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport iaxios from '../axios';\nimport { apiurl, url } from '../url';\nimport { EvergreenReactRouterLink } from './elements/header';\n\n\nexport function Home() {\n  const [projects, setProjects] = useState<string[]>([]);\n  const history = useHistory();\n\n  const getProjects = () => {\n    iaxios.get(apiurl.LISTPROJECT).then((response) => {\n      console.log(response.data);\n      setProjects(response.data);\n    });\n  }\n\n  useEffect(() => {\n    getProjects();\n    return () => {\n      setProjects([]);\n    };\n  }, []);\n\n  return (\n    <Pane className=\"home\">\n      <Heading className=\"homeHeading\">Metacity</Heading>\n      <Pane className=\"homeProjectList\">\n        {projects.map((project, index) => (\n          <Button height={48} key={index} onClick={() => history.push(url.VIEW + project)}>\n            {project}\n          </Button>)\n        )}\n      </Pane>\n      <EvergreenReactRouterLink to={url.PROJECTS} className=\"homeNav\">\n        Go to Controls\n      </EvergreenReactRouterLink>\n    </Pane>\n  );\n}","import { Dialog, TextInput, Text, InlineAlert } from 'evergreen-ui'\nimport { useState, FormEvent, createRef, useEffect } from 'react'\nimport iaxios from '../../axios';\nimport { apiurl } from '../../url';\n\n\ninterface IRenameDialogProps {\n    isShown: boolean;\n    setIsShown: (isShown: boolean) => void;\n    onSubmit: (newName: string) => void;\n    name: string;\n}\n\n\nexport function RenameProjectDialog(props: IRenameDialogProps) {\n    const nameref = createRef<HTMLInputElement>();\n    const [status, setStatus] = useState(\"\");\n\n    const renameProject = (e?: FormEvent) => {\n        if (e)\n            e.preventDefault();\n        const name = nameref.current?.value;\n        if (!name)\n            return;\n        iaxios.post(apiurl.RENAMEPROJECT, {\n            old: props.name,\n            new: name\n        }).then(() => {\n            if (nameref.current)\n                nameref.current.value = \"\";\n            props.setIsShown(false);\n            props.onSubmit(name);\n        }).catch((reject) => {\n            setStatus(`Project ${name} already exists`);\n        });\n    };\n\n    useEffect(() => {\n        setStatus(\"\");\n    }, [props.isShown]);\n\n    return (\n        <Dialog\n            isShown={props.isShown}\n            title={`Rename project ${props.name}`}\n            onConfirm={() => renameProject()}\n            onCloseComplete={() => props.setIsShown(false)}\n            confirmLabel=\"Rename\">\n            <form className=\"dialogForm\" onSubmit={renameProject}>\n                <TextInput\n                    name=\"name\"\n                    placeholder=\"New project name\"\n                    ref={nameref}/>\n            </form>\n            { status.length > 0 ? <InlineAlert intent=\"danger\" marginTop={16}>{status}</InlineAlert> : \"\"}\n        </Dialog>\n    );\n}","import { Dialog, Text } from 'evergreen-ui'\nimport iaxios from '../../axios';\nimport { apiurl } from '../../url';\n\ninterface IRenameDialogProps {\n    isShown: boolean;\n    setIsShown: (isShown: boolean) => void;\n    onSubmit: () => void;\n    name: string;\n}\n\n\nexport function DeleteProjectDialog(props: IRenameDialogProps) {\n    const deleteProject = () => {\n        iaxios.delete(apiurl.DELETEPROJECT, {\n            data: {\n                name: props.name\n            }\n        }).then(() => {\n            props.onSubmit();\n            props.setIsShown(false);\n        });\n    };\n\n    return (\n        <Dialog\n            isShown={props.isShown}\n            intent=\"danger\"\n            title=\"Delete project\"\n            onConfirm={deleteProject}\n            onCloseComplete={() => props.setIsShown(false)}\n            confirmLabel=\"Delete\">\n\n            <Text>Are you sure you want to delete project {props.name}?</Text>\n        </Dialog>\n    );\n}","import { Dialog, TextInput, Text, InlineAlert } from 'evergreen-ui'\nimport { useState, FormEvent, createRef, useEffect } from 'react'\nimport iaxios from '../../axios';\nimport { apiurl } from '../../url';\n\ninterface IRenameDialogProps {\n    isShown: boolean;\n    setIsShown: (isShown: boolean) => void;\n    onSubmit: (newName: string) => void;\n    project: string;\n    name: string;\n}\n\nexport function RenameLayerDialog(props: IRenameDialogProps) {\n    const nameref = createRef<HTMLInputElement>();\n    const [status, setStatus] = useState(\"\");\n\n    const renameLayer = (e?: FormEvent) => {\n        if (e)\n            e.preventDefault();\n        const name = nameref.current?.value;\n        if (!name)\n            return;\n        iaxios.post(apiurl.RENAMELAYER, {\n            project: props.project,\n            old: props.name,\n            new: name\n        }).then(() => {\n            if (nameref.current)\n                nameref.current.value = \"\";\n            props.setIsShown(false);\n            props.onSubmit(name);\n        }).catch(() => {\n            setStatus(`Layer ${name} already exists`);\n        });\n    };\n\n    useEffect(() => {\n        setStatus(\"\");\n    }, [props.isShown]);\n\n    return (\n        <Dialog\n            isShown={props.isShown}\n            title={`Rename layer ${props.name}`}\n            onConfirm={() => renameLayer()}\n            onCloseComplete={() => props.setIsShown(false)}\n            confirmLabel=\"Rename\">\n            <form className=\"dialogForm\">\n                <TextInput\n                    name=\"name\"\n                    placeholder=\"New layer name\"\n                    ref={nameref} />\n            </form>\n            <p>{status}</p>\n            { status.length > 0 ? <InlineAlert intent=\"danger\" marginTop={16}>{status}</InlineAlert> : \"\"}\n        </Dialog>\n    );\n}","import { Dialog, Text } from 'evergreen-ui'\nimport iaxios from '../../axios';\nimport { apiurl } from '../../url';\n\ninterface IDeleteDialogProps {\n    isShown: boolean;\n    setIsShown: (isShown: boolean) => void;\n    onSubmit: () => void;\n    project: string;\n    name: string;\n}\n\nexport function DeleteLayerDialog(props: IDeleteDialogProps) {\n    const deleteLayer = () => {\n        iaxios.delete(apiurl.DELETELAYER, {\n            data: {\n                project: props.project,\n                name: props.name,\n            }\n        }).then(() => {\n            props.setIsShown(false);\n            props.onSubmit();\n        })\n    };\n\n    return (\n        <Dialog\n            isShown={props.isShown}\n            title={`Delete layer ${props.name}`}\n            onConfirm={deleteLayer}\n            onCloseComplete={() => props.setIsShown(false)}\n            intent=\"danger\"\n            confirmLabel=\"Delete\">\n            <Text>Are you sure you want to delete layer {props.name}?</Text>\n        </Dialog>\n    );\n}","import { Pane, Table, TrashIcon, EditIcon, IconButton, EmptyState, LayersIcon } from 'evergreen-ui'\nimport { useEffect, useState } from 'react'\nimport { useHistory, useParams } from 'react-router-dom'\nimport { RenameLayerDialog } from './layerrename'\nimport { DeleteLayerDialog } from './layerdelete'\nimport iaxios from '../../axios'\nimport { url, apiurl } from '../../url'\nimport { EvergreenReactRouterLink } from './header'\n\n\ninterface ILayersProps {\n    projectName: string;\n}\n\ninterface ILayer {\n    name: string;\n    size: number;\n}\n\nexport function Layers(props: ILayersProps) {\n    const [layers, setLayers] = useState<ILayer[]>([]);\n    const [editedLayer, setEditedLayer] = useState<string | undefined>(undefined);\n    const [renameDialogShown, setRenameDialogShown] = useState(false);\n    const [deleteDialogShown, setDeleteDialogShown] = useState(false);\n\n\n    const loadLayers = () => {\n        iaxios.post(apiurl.LISTLAYER, { name: props.projectName }).then((response) => {\n            console.log(response.data);\n            setLayers(response.data);\n        });\n    }\n\n    useEffect(() => {\n        loadLayers();\n        return () => {\n            setLayers([]);\n        };\n    }, [props.projectName]);\n\n    return (\n        <Pane>\n            {renameDialogShown ?\n                <RenameLayerDialog\n                    name={editedLayer!}\n                    isShown={renameDialogShown}\n                    setIsShown={(isShown) => setRenameDialogShown(isShown)}\n                    onSubmit={loadLayers}\n                    project={props.projectName}\n                /> : \"\"}\n            {deleteDialogShown ?\n                <DeleteLayerDialog\n                    name={editedLayer!}\n                    isShown={deleteDialogShown}\n                    setIsShown={(isShown) => setDeleteDialogShown(isShown)}\n                    onSubmit={loadLayers}\n                    project={props.projectName}\n                /> : \"\"}\n            <Table>\n                <Table.Head className=\"row\">\n                    <Table.TextHeaderCell className=\"wide\">Layer</Table.TextHeaderCell>\n                    <Table.TextHeaderCell className=\"wide\">Number of Objects</Table.TextHeaderCell>\n                    <Table.TextHeaderCell className=\"narrow\">rename</Table.TextHeaderCell>\n                    <Table.TextHeaderCell className=\"narrow\">delete</Table.TextHeaderCell>\n                </Table.Head>\n                <Table.Body>\n                    {layers.length > 0 ? layers.map((layer) => (\n                        <Table.Row key={layer.name} paddingY={12} height=\"auto\" className=\"row\">\n                            <Table.TextCell className=\"wide\">{layer.name}</Table.TextCell>\n                            <Table.TextCell className=\"wide\">{layer.size}</Table.TextCell>\n                            <Table.TextCell className=\"narrow\">\n                                <IconButton icon={EditIcon} onClick={() => { setEditedLayer(layer.name); setRenameDialogShown(true); }} />\n                            </Table.TextCell>\n                            <Table.TextCell className=\"narrow\">\n                                <IconButton icon={TrashIcon} intent=\"danger\" onClick={() => { setEditedLayer(layer.name); setDeleteDialogShown(true); }} />\n                            </Table.TextCell>\n                        </Table.Row>\n                    )) :\n                        <EmptyState\n                            background=\"light\"\n                            title=\"No Layers in this Project\"\n                            orientation=\"horizontal\"\n                            icon={<LayersIcon color=\"#C1C4D6\" />}\n                            iconBgColor=\"#EDEFF5\"\n                            description=\"Layers apper after successfull processing of the input files.\"\n                            anchorCta={\n                                <EmptyState.LinkButton is={EvergreenReactRouterLink} to={url.UPLOADLAYER + props.projectName}>\n                                    Add first layer\n                                </EmptyState.LinkButton>\n                            }\n                        />\n                    }\n                </Table.Body>\n            </Table>\n        </Pane>\n    );\n}\n\n","import { Dialog, Text } from 'evergreen-ui'\nimport iaxios from '../../axios';\nimport { apiurl } from '../../url';\n\ninterface IRecompileDialogProps {\n    isShown: boolean;\n    setIsShown: (isShown: boolean) => void;\n    onSubmit: () => void;\n    name: string;\n}\n\n\nexport function RecompileProjectDialog(props: IRecompileDialogProps) {\n\n    const buildProject = () => {\n        iaxios.post(apiurl.BUILDPROJECT, {\n            name: props.name\n        }).then((response) => {\n            props.setIsShown(false);\n            props.onSubmit();\n        })\n    };\n\n    return (\n        <Dialog\n            isShown={props.isShown}\n            intent=\"danger\"\n            title=\"Recompile project\"\n            onConfirm={buildProject}\n            onCloseComplete={() => props.setIsShown(false)}\n            confirmLabel=\"Recompile\">\n            <Text>Are you sure you want to recompile project {props.name}?</Text>\n        </Dialog>\n    );\n}","import { Pane, Button, CubeIcon, AddToArtifactIcon, StyleIcon, Tooltip, MergeColumnsIcon } from 'evergreen-ui'\nimport { useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { RecompileProjectDialog } from './projectrecompile'\nimport { url } from '../../url'\n\n\ninterface IProjectProps {\n    name: string;\n}\n\nexport function ProjectActions(props: IProjectProps) {\n    const history = useHistory();\n    const [recompileDialogShown, setRecompileDialogShown] = useState(false);\n\n    const recompile = () => {\n        history.push(url.JOBS);\n    }\n\n    return (\n        <Pane>\n            <RecompileProjectDialog \n                isShown={recompileDialogShown}\n                setIsShown={ (isShown) => setRecompileDialogShown(isShown)}\n                onSubmit={recompile}\n                name={props.name}\n            />\n            <Button marginRight={12} height={48} iconBefore={AddToArtifactIcon} onClick={() => history.push(url.UPLOADLAYER + props.name)}>\n                Add Layer\n            </Button>\n            <Tooltip content=\"Recompile after updating layers or styles to view the changes in the visualization\">\n            <Button marginRight={12} height={48} iconBefore={CubeIcon} onClick={() => setRecompileDialogShown(true)}>\n                Recompile 3D\n            </Button>\n            </Tooltip>\n            <Button marginRight={12} height={48} iconBefore={StyleIcon} onClick={() => {}} disabled>\n                Add Styles\n            </Button>\n            <Button marginRight={12} height={48} iconBefore={MergeColumnsIcon} onClick={() => {}} disabled>\n                Map Layers\n            </Button>\n        </Pane>\n    );\n}\n\n","import { Pane, Heading, Button, TrashIcon, EditIcon, PresentationIcon } from 'evergreen-ui'\nimport { RenameProjectDialog } from './projectrename'\nimport { DeleteProjectDialog } from './projectdelete'\nimport { useEffect, useState } from 'react'\nimport { Layers } from './layers'\nimport { useHistory } from 'react-router-dom'\nimport { ProjectActions } from './projectactions'\nimport { url } from '../../url'\n\n\ninterface IProjectProps {\n    name: string;\n    showProject: (name?: string) => void;\n}\n\nexport function Project(props: IProjectProps) {\n    const [renameDialogShown, setRenameDialogShown] = useState(false);\n    const [deleteDialogShown, setDeleteDialogShown] = useState(false);\n    const history = useHistory();\n\n    useEffect(() => {\n        return () => {\n            setRenameDialogShown(false); // This worked for me\n            setDeleteDialogShown(false); // This worked for me\n        };\n    }, []);\n\n    return ( \n        <Pane className=\"project\">\n            <RenameProjectDialog \n                name={props.name}\n                isShown={renameDialogShown}\n                setIsShown={(isShown: boolean) => setRenameDialogShown(isShown)}\n                onSubmit={props.showProject}\n            />\n            <DeleteProjectDialog \n                name={props.name}\n                isShown={deleteDialogShown}\n                setIsShown={(isShown: boolean) => setDeleteDialogShown(isShown)}\n                onSubmit={() => props.showProject()}\n            />\n            <Pane className=\"projectHeader\">\n                <Heading className=\"wide\">Project {props.name}</Heading> \n                <Button marginY={8} marginRight={12} iconBefore={PresentationIcon} onClick={() => { history.push(url.VIEW + props.name) }}>\n                    View\n                </Button>\n                <Button marginY={8} marginRight={12} iconBefore={EditIcon} onClick={() => setRenameDialogShown(true)}>\n                    Rename\n                </Button>\n                <Button marginY={8} marginRight={12} iconBefore={TrashIcon} onClick={() => setDeleteDialogShown(true)} intent=\"danger\">\n                    Delete...\n                </Button>\n            </Pane>\n            <Layers projectName={props.name} />\n            <Heading is=\"h3\">Actions</Heading>\n            <ProjectActions name={props.name}/>\n        </Pane>\n    );\n}\n\n","import { Dialog, TextInput, Text, InlineAlert } from 'evergreen-ui'\nimport { useState, FormEvent, createRef, useEffect } from 'react'\nimport iaxios from '../../axios';\nimport { apiurl } from '../../url';\n\n\nenum NameState {\n    empty,\n    exists,\n    valid\n}\n\ninterface IAddDialogProps {\n    isShown: boolean;\n    setIsShown: (isShown: boolean) => void;\n    onSubmit: () => void;\n}\n\n\nexport function AddProjectDialog(props: IAddDialogProps) {\n    const nameref = createRef<HTMLInputElement>();\n    const [status, setStatus] = useState(\"\");\n\n    const createProject = (e?: FormEvent) => {\n        if (e)\n            e.preventDefault();\n\n        const name = nameref.current?.value;\n        if (!name)\n            return;\n\n        iaxios.post(apiurl.ADDPROJECT, { name: name }).then((response) => {\n            console.log(response.data);\n            if (nameref.current)\n                nameref.current.value = \"\";\n            props.setIsShown(false);\n            props.onSubmit();\n        }).catch((reject) => {\n            setStatus(`Project ${name} already exists`);\n        });\n    };\n\n    useEffect(() => {\n        setStatus(\"\");\n    }, [props.isShown]);\n\n    return (\n        <Dialog\n            isShown={props.isShown}\n            title=\"Create new project\"\n            onConfirm={() => createProject()}\n            onCloseComplete={() => props.setIsShown(false)}\n            confirmLabel=\"Create\">\n            <form className=\"dialogForm\" onSubmit={createProject}>\n                <TextInput\n                    name=\"name\"\n                    placeholder=\"Project Name\"\n                    ref={nameref} />\n            </form>\n            { status.length > 0 ? <InlineAlert intent=\"danger\" marginTop={16}>{status}</InlineAlert> : \"\"}\n        </Dialog>\n    );\n}","import { Pane, Tablist, Tab, Heading, AddIcon } from 'evergreen-ui'\n\ninterface IProjectListProps {\n    currentProject: string | undefined;\n    onSelect: (name: string) => void;\n    onAddDialog: () => void;\n    projects: string[];\n}\n\nexport function ProjectList(props: IProjectListProps) {\n\n  return (\n    <Pane className=\"list\">\n        <Heading className=\"projectList title\">Projects</Heading>\n        <Pane className=\"projectList action\" onClick={props.onAddDialog}><AddIcon/>Add Project</Pane>\n        <Tablist className=\"projectList tabs\">\n        {props.projects.map((project) => (\n            <Tab\n            key={project}\n            id={`tab-${project}`}\n            onSelect={() => props.onSelect(project)}\n            isSelected={project === props.currentProject}\n            aria-controls={`panel-${project}`}>\n            {project}\n            </Tab>\n        ))}\n        </Tablist>\n    </Pane>\n  );\n}","import { Pane, Tablist, Tab, Heading, EmptyState, ProjectsIcon, AddIcon, Dialog, TextInput, Text } from 'evergreen-ui'\nimport { useEffect, useState, FormEvent, createRef } from 'react'\nimport { useHistory, useParams } from 'react-router-dom';\nimport iaxios from '../axios';\nimport { url, apiurl } from '../url';\n\n\nexport function authUser(history: any, callback: CallableFunction) {\n    iaxios.get(apiurl.AUTHUSER).then((response) => {\n        console.log('user auth', response.data);\n        callback();\n    }).catch((reject) => {\n        history.push(url.LOGIN);\n    });\n}\n\n\nexport function Login() {\n  const [status, setStatus] = useState<string>(\"\");\n  let history = useHistory();\n\n  const name = createRef<HTMLInputElement>();\n  const pass = createRef<HTMLInputElement>();\n\n  const login = (event: FormEvent) => {\n    event.preventDefault();\n\n    let formData = new FormData();\n    formData.append(\"username\", name.current?.value || \"\");\n    formData.append(\"password\", pass.current?.value || \"\");\n\n    iaxios.post(apiurl.TOKEN, formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    }).then((response) => {\n      console.log(response);\n      localStorage.setItem(\"JWT\", response.data.access_token);\n      iaxios.defaults.headers.common[\"Authorization\"] = `Bearer ${response.data.access_token}`;\n      history.push(url.PROJECTS);\n    }).catch((reject) => {\n      console.error(reject);\n      setStatus(\"There was a problem with your login, check your username and password.\")\n    });\n  };\n\n  useEffect(() => {\n    iaxios.get(apiurl.AUTHUSER, ).then(() => {\n      history.push(url.PROJECTS);\n    }).catch((reject) => {\n        //silently pass\n    });\n  }, []);\n\n\n  return (\n    <Pane className=\"fullScreen\">\n        <Pane>\n          <Heading is=\"h1\">Login</Heading>\n          { status.length > 0? <p>{status}</p> : \"\"}\n          <form onSubmit={login}>\n            <TextInput width=\"100%\" placeholder=\"username\" ref={name} type=\"text\" />\n            <TextInput width=\"100%\" placeholder=\"password\" ref={pass} type=\"password\" />\n            <TextInput type=\"submit\"/>\n          </form>\n        </Pane>\n    </Pane>\n  )\n}","import { Pane, EmptyState, ProjectsIcon } from 'evergreen-ui'\nimport { useEffect, useState } from 'react'\nimport { useHistory, useParams } from 'react-router-dom';\nimport iaxios from '../axios';\nimport { url, apiurl } from '../url';\nimport { Header } from './elements/header'\nimport { Project } from './elements/project'\nimport { ProjectList } from './elements/projectlist'\nimport { AddProjectDialog } from './elements/projectadd'\nimport { authUser } from './login';\n\n\nexport function Projects() {\n    const { project_name } = useParams<{ project_name: string|undefined }>();\n    const [currentProject, setCurrentProject] = useState<string|undefined>(project_name);\n    const [projects, setProjects] = useState<string[]>([]);\n    const [addDialogShown, setAddDialogShown] = useState(false);\n    const history = useHistory();\n\n    const getProjects = () => {\n        iaxios.get(apiurl.LISTPROJECT).then((response) => {\n            console.log(response.data);\n            setProjects(response.data);\n        });\n    }\n\n    useEffect(() => {\n        authUser(history, () => {\n            getProjects();\n        });\n        return () => {\n            setProjects([]);\n        };\n    }, []);\n\n    const showProject = (name?: string) => {\n        getProjects();\n        setCurrentProject(name);\n\n        let lurl = url.PROJECTS;\n        if (name)\n            lurl += name;\n        history.push(lurl);\n    }\n\n    return (\n        <Pane>\n            <AddProjectDialog\n                isShown={addDialogShown}\n                setIsShown={(isShown: boolean) => setAddDialogShown(isShown)}\n                onSubmit={getProjects} />\n            <Header projects />\n            <Pane className=\"projects\">\n                <ProjectList\n                    currentProject={currentProject}\n                    onSelect={showProject}\n                    onAddDialog={() => setAddDialogShown(true)}\n                    projects={projects}\n                />\n                <Pane className={`content ${currentProject ? \"\" : \"empty\"}`} justifyContent=\"center\" alignItems=\"center\">\n                    {currentProject ?\n                        <Project\n                            name={currentProject} \n                            showProject={showProject}\n                        />\n                        :\n                        <EmptyState\n                            background=\"light\"\n                            title=\"No project selected\"\n                            orientation=\"vertical\"\n                            icon={<ProjectsIcon color=\"#C1C4D6\" />}\n                            iconBgColor=\"#EDEFF5\"\n                        />}\n                </Pane>\n            </Pane>\n        </Pane>\n    );\n}","import { Pane, Heading, LayersIcon, Icon, TextInput, Button, Spinner, Text } from 'evergreen-ui'\nimport { useEffect, useState, createRef, FormEvent } from 'react'\nimport { useHistory, useParams } from 'react-router-dom';\nimport iaxios from '../axios';\nimport { url, apiurl } from '../url';\nimport { Header } from './elements/header'\nimport { Project } from './elements/project'\nimport { ProjectList } from './elements/projectlist'\nimport { AddProjectDialog } from './elements/projectadd'\nimport { authUser } from './login';\nimport { useDropzone } from 'react-dropzone';\nimport { toast } from 'react-toastify';\n\n\ninterface IDropzone {\n    submit: (layer_name: string, files: File[]) => void;\n};\n\nfunction Dropzone(props: IDropzone) {\n    const { acceptedFiles, getRootProps, getInputProps } = useDropzone();\n    const name = createRef<HTMLInputElement>();\n\n    const files = acceptedFiles.map(file => (\n        <li key={file.name}>\n            <span className=\"fileName\">{file.name}</span><span className=\"fileSize\">{file.size} bytes</span>\n        </li>\n    ));\n\n    const submit = (event: FormEvent) => {\n        event.preventDefault();\n        props.submit(name.current!.value, acceptedFiles);\n    }\n\n    return (\n        <Pane className=\"dropzoneContainer\">\n            <form onSubmit={submit} id=\"layerUploadForm\">\n                <TextInput placeholder=\"layer name\" ref={name} className=\"layerName\" />\n                <div {...getRootProps({ className: \"dropzone\" })}>\n                    <input {...getInputProps()} />\n                    <p>Click or drag 'n' drop layer files here</p>\n                    <ul className=\"filelist\">{files}</ul>\n                </div>\n            </form>\n            <Button marginRight={16} appearance=\"primary\" type=\"submit\" form=\"layerUploadForm\">\n                Upload\n            </Button>\n        </Pane>\n    );\n}\n\n\n\nexport function UploadLayer() {\n    const { project_name } = useParams<{ project_name: string }>();\n    const history = useHistory();\n\n    const [progress, setProgress] = useState<number>(0);\n    const [uploading, setUploading] = useState<boolean>(false);\n\n    useEffect(() => {\n        authUser(history, () => { });\n    }, []);\n\n    const submit = (layer_name: string, files: File[]) => {\n        if (uploading)\n            return;\n\n        if (layer_name === undefined || layer_name.length == 0)\n        {\n            toast('No name specified');\n            return;\n        }\n\n        if (files === undefined || files.length == 0)\n        {\n            toast('No files provided');\n            return;\n        }\n\n        setUploading(true);\n\n        let formData = new FormData();\n        formData.append(\"project\", project_name);\n        formData.append(\"layer\", layer_name);\n        files.forEach(dataset => {\n            formData.append(\"files\", dataset)\n        });\n\n        iaxios.post(apiurl.ADDLAYER, formData, {\n            headers: {\n                \"Content-Type\": \"multipart/form-data\"\n            },\n            onUploadProgress: progressEvent => setProgress(progressEvent.loaded / progressEvent.total * 100)\n        }).then((response) => {\n            console.log(response);\n            history.push(url.JOBS);\n        })\n    }\n\n\n    return (\n        <Pane>\n            <Header projects />\n            <Pane className=\"upload\">\n                { uploading ?\n                    <Spinner/>\n                    :\n                    <Icon icon={LayersIcon} size={30} color=\"#C1C4D6\" background=\"#EDEFF5\" className=\"uploadIcon\" padding={20} borderRadius={40} />\n                }\n                <Heading className=\"uploadTitle\">Uploading Layer to Project {project_name}</Heading>\n                { uploading ?\n                    <Pane className=\"progress\">\n                        <Text className=\"label\">{progress.toFixed(0)}%</Text>\n                    </Pane> \n                    :\n                    <Dropzone submit={submit} />\n                }\n            </Pane>\n\n        </Pane>\n    );\n}","import { Pane, Table, CodeIcon, ApplicationIcon, IconButton, EmptyState, ConsoleIcon, SideSheet, Heading } from 'evergreen-ui'\nimport { useEffect, useState } from 'react'\nimport iaxios from '../../axios'\nimport { apiurl } from '../../url'\nimport ReactJson from 'react-json-view'\n\n\ninterface IJob {\n    type: string;\n    status: number;\n    project?: string;\n    job_id: string;\n}\n\nexport function JobList() {\n    const [jobs, setJobs] = useState<IJob[]>([]);\n    const [selectedJob, setSelectedJob] = useState<IJob | undefined>(undefined);\n    const [detailIsShown, setDetailIsShown] = useState(false)\n\n    let update: NodeJS.Timeout;\n\n    const loadJobs = () => {\n        iaxios.get(apiurl.LISTJOBS).then((response) => {\n            console.log(response.data);\n            setJobs(response.data);\n            update = setTimeout(loadJobs, 2000);\n        });\n    }\n\n    useEffect(() => {\n        loadJobs();\n        return () => {\n            clearTimeout(update);\n            setJobs([]);\n        };\n    }, []);\n\n    return (\n        <Pane>\n            <SideSheet\n                isShown={detailIsShown}\n                onCloseComplete={() => setDetailIsShown(false)}\n                preventBodyScrolling>\n                <Pane className=\"jsonRaw\">\n                    <Heading className=\"jsonHeading\">Job {selectedJob?.job_id}</Heading>\n\n                    <Pane className=\"json\">\n                        <ReactJson \n                            src={selectedJob as object} \n                            enableClipboard={false}\n                            theme={{\n                                base00: \"#FFF\",\n                                base01: \"#DDD\",\n                                base02: \"#DDD\",\n                                base03: \"#444\",\n                                base04: \"#BBB\",\n                                base05: \"#444\",\n                                base06: \"#444\",\n                                base07: \"#444\",\n                                base08: \"#444\",\n                                base09: \"#3366FF\",\n                                base0A: \"#3366FF\",\n                                base0B: \"#3366FF\",\n                                base0C: \"#3366FF\",\n                                base0D: \"#BBB\",\n                                base0E: \"#BBB\",\n                                base0F: \"#3366FF\"\n                                //https://github.com/chriskempson/base16/blob/master/styling.md\n                            }}/>\n                    </Pane>\n                </Pane>\n            </SideSheet>\n            <Table>\n                <Table.Head className=\"row\">\n                    <Table.TextHeaderCell className=\"wide\">Job Type</Table.TextHeaderCell>\n                    <Table.TextHeaderCell className=\"wide\">Status</Table.TextHeaderCell>\n                    <Table.TextHeaderCell className=\"wide\">Project</Table.TextHeaderCell>\n                    <Table.TextHeaderCell className=\"narrow\">Log</Table.TextHeaderCell>\n                    <Table.TextHeaderCell className=\"narrow\">Raw</Table.TextHeaderCell>\n                </Table.Head>\n                <Table.Body>\n                    {jobs.length > 0 ? jobs.map((job) => (\n                        <Table.Row key={job.job_id} paddingY={12} height=\"auto\" className=\"row\">\n                            <Table.TextCell className=\"wide\">{job.type}</Table.TextCell>\n                            <Table.TextCell className=\"wide\">{job.status}</Table.TextCell>\n                            <Table.TextCell className=\"wide\">{job.project ? job.project : \"--\"}</Table.TextCell>\n                            <Table.TextCell className=\"narrow\">\n                                <IconButton icon={ApplicationIcon} onClick={() => {}} disabled/>\n                            </Table.TextCell>\n                            <Table.TextCell className=\"narrow\">\n                                <IconButton icon={CodeIcon} onClick={() => { setSelectedJob(job); setDetailIsShown(true); }} />\n                            </Table.TextCell>\n                        </Table.Row>\n                    )) :\n                        <EmptyState\n                            background=\"light\"\n                            title=\"No Running Jobs\"\n                            orientation=\"horizontal\"\n                            icon={<ConsoleIcon color=\"#C1C4D6\" />}\n                            iconBgColor=\"#EDEFF5\"\n                            description=\"Jobs run in the background and process input data into visualizable elements\"\n                        />\n                    }\n                </Table.Body>\n            </Table>\n        </Pane>\n    );\n}\n\n","import { Pane, Pre } from 'evergreen-ui'\nimport { RenameProjectDialog } from './projectrename'\nimport { DeleteProjectDialog } from './projectdelete'\nimport { useEffect, useState } from 'react'\nimport { Layers } from './layers'\nimport { ProjectActions } from './projectactions'\nimport iaxios from '../../axios'\nimport { apiurl } from '../../url'\n\n\ninterface ILogProps {\n    name: string;\n}\n\nexport function Log(props: ILogProps) {\n    const [contents, setContents] = useState(\"\");\n\n    let update: NodeJS.Timeout;\n\n    const loadLog = () => {\n        iaxios.post(apiurl.LOG, {\n            name: props.name\n        }).then((response) => {\n            setContents(response.data);\n            update = setTimeout(loadLog, 2000);\n        })\n    }\n\n    useEffect(() => {\n        loadLog();\n        return () => {\n            setContents(\"\");\n            clearTimeout(update);\n        };\n    }, [props.name]);\n\n    return ( \n        <Pane className=\"logContents\">\n            { contents && contents.length > 0 ?\n                <Pre className=\"logLines\">{contents.split(/[\\r\\n]+/).map((line, index) => <span key={index}>{line}</span>)}</Pre>\n                :\n                <Pre>No contents</Pre>\n            }\n        </Pane>\n    );\n}\n\n","import { Pane, Tablist, Tab, EmptyState, ApplicationIcon } from 'evergreen-ui'\nimport { useEffect, useState } from 'react'\nimport { useHistory, useParams } from 'react-router-dom'\nimport { Log } from './log'\nimport iaxios from '../../axios'\nimport { url, apiurl } from '../../url'\nimport { EvergreenReactRouterLink } from './header'\nimport ReactJson from 'react-json-view'\n\n\nexport function LogList() {\n    const [logs, setLogs] = useState<string[]>([]);\n    const [selectedLog, setSelectedLog] = useState<string | undefined>(undefined);\n\n    let update: NodeJS.Timeout;\n\n    const loadLogs = () => {\n        iaxios.get(apiurl.LISTLOGS).then((response) => {\n            console.log(response.data);\n            setLogs(response.data);\n            update = setTimeout(loadLogs, 2000);\n        });\n    }\n\n    useEffect(() => {\n        loadLogs();\n        return () => {\n            setLogs([]);\n            clearTimeout(update);\n        };\n    }, []);\n\n    return (\n        <Pane>\n            <Tablist className=\"logList\" marginBottom={16} flexBasis={240} marginRight={24}>\n                {logs.map((log, index) => (\n                    <Tab\n                        key={log}\n                        id={log}\n                        onSelect={() => setSelectedLog(log)}\n                        isSelected={log === selectedLog}\n                        aria-controls={`panel-${log}`}\n                        className=\"logTab\"\n                    >\n                        {log}\n                    </Tab>\n                ))}\n            </Tablist>\n            <Pane>\n                { selectedLog ?\n                    <Log name={selectedLog}/>\n                :\n                <EmptyState\n                    background=\"light\"\n                    title=\"No Log selected\"\n                    orientation=\"horizontal\"\n                    icon={<ApplicationIcon color=\"#C1C4D6\" />}\n                    iconBgColor=\"#EDEFF5\"\n                    description=\"Logs contain debug information for running processes\"\n                />\n                }\n            </Pane>\n        </Pane>\n    );\n}\n\n","import { Pane, Heading } from 'evergreen-ui'\nimport { useEffect, useState, createRef, FormEvent } from 'react'\nimport { useHistory, useParams } from 'react-router-dom';\nimport iaxios from '../axios';\nimport { url, apiurl } from '../url';\nimport { Header } from './elements/header'\nimport { JobList } from './elements/jobs'\nimport { LogList } from './elements/logs'\nimport { Project } from './elements/project'\nimport { ProjectList } from './elements/projectlist'\nimport { AddProjectDialog } from './elements/projectadd'\nimport { authUser } from './login';\nimport { useDropzone } from 'react-dropzone';\nimport { toast } from 'react-toastify';\n\n\nexport function Jobs() {\n    const history = useHistory();\n\n    useEffect(() => {\n        authUser(history, () => { });\n    }, []);\n\n    return (\n        <Pane>\n            <Header jobs />\n            <Pane className=\"jobs\">\n                <Heading className=\"jobsHeading\">Jobs</Heading>\n                <JobList />\n            </Pane>\n            <Pane className=\"logs\">\n                <Heading className=\"logsHeading\">Logs</Heading>\n                <LogList />\n            </Pane>\n        </Pane>\n    );\n}","import { Model } from \"./models\";\n\n\nexport class Decoder {\n    static base64tofloat32(data: string, model: Model, callback: CallableFunction) {\n        let blob: string = window.atob(data);\n        let len = blob.length / Float64Array.BYTES_PER_ELEMENT;\n        let view: DataView = new DataView(new ArrayBuffer(Float64Array.BYTES_PER_ELEMENT));\n\t\tlet array = new Float32Array(len);\n        let p = 0;\n        let it = 1;\n        const itStep = 10000;\n        const totalStop = len * Float64Array.BYTES_PER_ELEMENT;\n        console.log(totalStop);\n        \n        const iteration = () => {\n            const stepStop = it * itStep * Float64Array.BYTES_PER_ELEMENT;\n            for (; p < Math.min(stepStop, totalStop); p = p + Float64Array.BYTES_PER_ELEMENT) {\n                for(let i = 0; i < Float64Array.BYTES_PER_ELEMENT; ++i)\n                    view.setUint8(i, blob.charCodeAt(p + i));\n                array[p / Float64Array.BYTES_PER_ELEMENT] = view.getFloat64(0, true);\n            }\n\n            if (model.removed)\n                return;\n\n            if (p < totalStop) {\n                it++;\n                setTimeout(iteration, 10);\n            } else {\n                view = null as unknown as DataView;\n                blob = null as unknown as string;\n                callback(array);\n            }\n        }\n\n        iteration();\n    }\n\n    static base64toint32(data: string, offset: number = 0, model: Model, callback: CallableFunction) {\n        let blob: string = window.atob(data);\n        let len = blob.length / Int32Array.BYTES_PER_ELEMENT;\n        let view: DataView = new DataView(new ArrayBuffer(Int32Array.BYTES_PER_ELEMENT));\n\t\tlet array = new Uint32Array(len * Int32Array.BYTES_PER_ELEMENT);\n        let p = 0;\n        let it = 1;\n        const itStep = 10000;\n        const totalStop = len * Int32Array.BYTES_PER_ELEMENT;\n        \n        const iteration = () => {\n            const stepStop = it * itStep * Int32Array.BYTES_PER_ELEMENT;\n            \n            for (; p < Math.min(stepStop, totalStop); p = p + Int32Array.BYTES_PER_ELEMENT) {\n                for(let i = 0; i < Int32Array.BYTES_PER_ELEMENT; ++i)\n                    view.setUint8(i, blob.charCodeAt(p + i));\n                array[p / Int32Array.BYTES_PER_ELEMENT] = view.getUint32(0, true) + offset;\n            }\n\n            if (model.removed)\n                return;\n\n            if (p < totalStop) {\n                it++;\n                setTimeout(iteration, 10);\n            } else {\n                view = null as unknown as DataView;\n                blob = null as unknown as string;\n                callback(new Uint8Array(array.buffer));\n            }\n        }\n\n        iteration();\n    }\n}","\n\nfunction capLeft(resolution: number) {\n    let vertices = [];\n    const shift = Math.PI / 2;\n    const step = Math.PI / resolution;\n\n    for (let i = 0; i < resolution; ++i) {\n        vertices.push(0, 0, 0);\n        vertices.push(Math.cos(shift + step * i), Math.sin(shift + step * i), 0);\n        vertices.push(Math.cos(shift + step * (i + 1)), Math.sin(shift + step * (i + 1)), 0);\n\n    }\n\n    return vertices\n}\n\nfunction capRight(resolution: number) {\n    let vertices = [];\n    const shift = Math.PI / 2;\n    const step = Math.PI / resolution;\n\n    for (let i = 0; i < resolution; ++i) {\n        vertices.push(1, 0, 0);\n        vertices.push(1 - Math.cos(shift + step * i), Math.sin(shift + step * i), 0);\n        vertices.push(1 - Math.cos(shift + step * (i + 1)), Math.sin(shift + step * (i + 1)), 0);\n    }\n\n    return vertices;\n}\n\nexport function segment(resolution: number = 5) {\n    let geometry = [\n        0, -1, 0,\n        1, -1, 0,\n        1, 1, 0,\n        0, -1, 0,\n        1, 1, 0,\n        0, 1, 0\n    ];\n\n    geometry = geometry.concat(capLeft(resolution));\n    geometry = geometry.concat(capRight(resolution));\n    return geometry;\n}\n","import { ILayer, IModel, IOverlay } from \"./types\";\nimport { Renderer } from \"./renderer\"\nimport * as THREE from \"three\";\nimport { Decoder } from \"./decoder\";\nimport { segment } from \"./geometry\";\n\n\nexport abstract class Model {\n    renderer: Renderer;\n    mesh: THREE.Mesh | undefined;\n    pickingMesh: THREE.Mesh | undefined;\n\n    removed: boolean;\n\n    constructor(renderer: Renderer) {\n        this.renderer = renderer;\n        this.removed = false;\n    }\n\n    remove() {\n        this.mesh = this.removeFrom(this.mesh, this.renderer.scene);\n        this.pickingMesh = this.removeFrom(this.pickingMesh, this.renderer.pickingScene);\n        this.removed = true;\n    }\n\n    removeFrom(mesh: THREE.Mesh | THREE.LineSegments | undefined, scene: THREE.Scene) {\n        if (mesh) {\n            scene.remove(mesh);\n            mesh.geometry.dispose();\n        }\n        return undefined;\n    }\n}\n\n\nexport class PolygonalModel extends Model {\n    constructor(data: IModel, renderer: Renderer, layer: ILayer, pickable: boolean = true) {\n        super(renderer);\n        const offset = renderer.picker.offsetForLayer(layer.name);\n\n        Decoder.base64tofloat32(data.vertices, this, (vertices: Float32Array) => {\n            if (this.removed)\n                return;\n\n            if (pickable)\n            {\n                Decoder.base64toint32(data.attributes.oid.data, offset, this, (objectid: Uint8Array) => {\n                    if (this.removed)\n                        return;\n    \n                    const geometry = this.createGeometry(vertices, objectid);\n                    this.createMesh(geometry, pickable);\n                    this.createPickingMesh(geometry);\n                    this.renderer.changed = true;\n    \n                    if (this.removed)\n                        this.remove();\n                });\n            } else {\n                const geometry = this.createGeometry(vertices);\n                this.createMesh(geometry, pickable);\n                this.renderer.changed = true;\n\n                if (this.removed)\n                    this.remove();\n            }\n        });\n    }\n\n    private createPickingMesh(geometry: THREE.BufferGeometry) {\n        const pickingMesh = new THREE.Mesh(geometry, this.renderer.matlib.pickingMaterial);\n        this.renderer.pickingScene.add(pickingMesh);\n        this.pickingMesh = pickingMesh;\n    }\n\n    private createMesh(geometry: THREE.BufferGeometry, pickable: boolean) {\n        const material = pickable? this.renderer.matlib.polygonSelectMaterial : this.renderer.matlib.polygonMaterial;\n        const mesh = new THREE.Mesh(geometry, material);\n        mesh.receiveShadow = true;\n        mesh.castShadow = true;\n        this.renderer.scene.add(mesh);\n        this.mesh = mesh;\n    }\n\n    private createGeometry(vertices: Float32Array, objectid: Uint8Array | undefined = undefined) {\n        const geometry = new THREE.BufferGeometry();\n        geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n        if (objectid)\n            geometry.setAttribute('objectID', new THREE.BufferAttribute(objectid, 4, true));\n        geometry.computeVertexNormals();\n        return geometry;\n    }\n\n    \n}\n\nexport class LineModel extends Model {\n    constructor(data: IModel, renderer: Renderer, layer: ILayer) {\n        super(renderer);\n        const offset = renderer.picker.offsetForLayer(layer.name);\n\n        Decoder.base64tofloat32(data.vertices, this, (vertices: Float32Array) => {\n            if (this.removed)\n                return;\n\n            Decoder.base64toint32(data.attributes.oid.data, offset, this, (objectid: Uint8Array) => {\n                if (this.removed)\n                    return;\n\n                const geometry = this.createGeometry(vertices); //offset\n                this.createMesh(geometry);\n\n                //geometry.setAttribute('objectID', new THREE.InstancedBufferAttribute(\n                //    objectid,\n                //    4, //itemsize\n                //    true, //normalized\n                //    1)  //mesh per attribute\n                //);\n\n                //geometry.computeVertexNormals();\n\n                //normal mesh\n                //console.log(this.mesh);\n\n                this.renderer.changed = true;\n\n                //picking mesh\n                //const pickingMesh = new THREE.Mesh( geometry, this.renderer.pickingMaterial ); //TODO change to normal material\n                //this.renderer.pickingScene.add(pickingMesh);\n                //this.renderer.changed = true;\n                //this.mesh = mesh;\n\n                if (this.removed)\n                    this.remove();\n\n            });\n        });\n    }\n\n    private createMesh(geometry: THREE.InstancedBufferGeometry) {\n        const mesh = new THREE.Mesh(geometry, this.renderer.matlib.lineMaterial);\n        mesh.frustumCulled = false; //this one was a big pain to figure out...\n        this.renderer.scene.add(mesh);\n        this.mesh = mesh;\n    }\n\n    private createGeometry(vertices: Float32Array) {\n        const geometry = new THREE.InstancedBufferGeometry();\n        geometry.instanceCount = vertices.length / 3;\n        geometry.setAttribute('position', new THREE.BufferAttribute(new Float32Array(segment()), 3));\n        geometry.setAttribute('lineStart', new THREE.InterleavedBufferAttribute(\n            new THREE.InstancedInterleavedBuffer(vertices, 6, 1), 3, 0));\n\n        geometry.setAttribute('lineEnd', new THREE.InterleavedBufferAttribute(\n            new THREE.InstancedInterleavedBuffer(vertices, 6, 1), 3, 3));\n\n        return geometry;\n    }\n}\n\nexport class LineProxyModel extends Model {\n    constructor(data: IModel, renderer: Renderer, overlay: IOverlay) {\n        super(renderer);\n        const offset = renderer.picker.offsetForLayer(overlay.source);\n\n        Decoder.base64tofloat32(data.vertices, this, (vertices: Float32Array) => {\n            if (this.removed)\n                return;\n\n            \n\n            Decoder.base64toint32(data.attributes.oid.data, offset, this, (objectid: Uint8Array) => {\n                if (this.removed)\n                    return;\n\n                const geometry = this.createGeometry(vertices); //offset\n                this.createMesh(geometry);\n\n                //geometry.setAttribute('objectID', new THREE.InstancedBufferAttribute(\n                //    objectid,\n                //    4, //itemsize\n                //    true, //normalized\n                //    1)  //mesh per attribute\n                //);\n\n                //geometry.computeVertexNormals();\n\n                //normal mesh\n                //console.log(this.mesh);\n\n                this.renderer.changed = true;\n\n                //picking mesh\n                //const pickingMesh = new THREE.Mesh( geometry, this.renderer.pickingMaterial ); //TODO change to normal material\n                //this.renderer.pickingScene.add(pickingMesh);\n                //this.renderer.changed = true;\n                //this.mesh = mesh;\n\n                if (this.removed)\n                    this.remove();\n\n            });\n        });\n    }\n\n    private createMesh(geometry: THREE.InstancedBufferGeometry) {\n        const mesh = new THREE.Mesh(geometry, this.renderer.matlib.lineMaterial);\n        mesh.frustumCulled = false; //this one was a big pain to figure out...\n        this.renderer.scene.add(mesh);\n        this.mesh = mesh;\n    }\n\n    private createGeometry(vertices: Float32Array) {\n        const geometry = new THREE.InstancedBufferGeometry();\n        geometry.instanceCount = vertices.length / 3;\n        geometry.setAttribute('position', new THREE.BufferAttribute(new Float32Array(segment()), 3));\n        geometry.setAttribute('lineStart', new THREE.InterleavedBufferAttribute(\n            new THREE.InstancedInterleavedBuffer(vertices, 6, 1), 3, 0));\n\n        geometry.setAttribute('lineEnd', new THREE.InterleavedBufferAttribute(\n            new THREE.InstancedInterleavedBuffer(vertices, 6, 1), 3, 3));\n\n        return geometry;\n    }\n}\n","import { ITile, ILayer, IOverlay } from \"./types\";\nimport { Renderer } from \"./renderer\"\nimport * as THREE from \"three\";\nimport { Vector2, Vector3 } from \"three\";\nimport iaxios from \"../axios\";\nimport axios from \"axios\";\nimport { Model, PolygonalModel, LineModel, LineProxyModel } from \"./models\";\n\n\nexport class Tile {\n    bbox: [Vector3, Vector3];\n    brect: [Vector2, Vector2];\n    x: number;\n    y: number;\n    renderer: Renderer;\n    layer: ILayer | IOverlay;\n    sourceFile: string;\n\n    //axios stop request\n    stopFlag: any;\n\n    private isVisible: boolean;\n    private models: Model[];\n\n\n    constructor(data: ITile, renderer: Renderer, layer: ILayer | IOverlay) {\n        this.bbox = [new Vector3(...data.box[0]), new Vector3(...data.box[1])];\n        this.brect = [new Vector2(this.bbox[0].x, this.bbox[0].y), new Vector2(this.bbox[1].x, this.bbox[1].y)];\n        this.x = data.x;\n        this.y = data.y;\n        this.sourceFile = data.file;\n        this.layer = layer;\n        this.renderer = renderer;\n        this.isVisible = false;\n        this.models = [];\n    }\n\n    set visible(isVisible: boolean) {\n        if (this.isVisible === isVisible)\n            return;\n\n        this.isVisible = isVisible;\n\n        if (isVisible)\n            this.forRender();\n        else \n            this.stopRender();\n    }\n\n    forRender() {\n        this.stopFlag = axios.CancelToken.source();\n        iaxios.get(`/api/data/${this.layer.project}/${this.layer.name}/grid/tiles/${this.sourceFile}`, {\n            cancelToken: this.stopFlag.token\n          }).then(\n            (response) => {\n                this.createModels(response.data);\n                this.postRenderCheck();\n            }\n        ).catch((reject) => {\n            console.log(reject);\n        })\n    }\n\n    private createModels(data: Array<any>) {\n        for (let modeldata of data) {\n            const model = this.deserializeModel(modeldata);\n            if (model)\n                this.models.push(model);\n        }\n    }\n\n    private deserializeModel(data: any) {\n        if (data.tags && data.tags.proxy === true) {\n            if (data.type === \"simpleline\")\n                return new LineProxyModel(data, this.renderer, this.layer as IOverlay);\n        } else {\n            if (data.type === \"simplepolygon\")\n                return new PolygonalModel(data, this.renderer, this.layer);\n\n            if (data.type === \"simpleline\")\n                return new LineModel(data, this.renderer, this.layer);\n        }\n    }\n\n    postRenderCheck() {\n        if (!this.isVisible)\n            this.stopRender();\n    }\n\n    stopRender() {\n        if (this.models.length > 0) {\n            for (const m of this.models)\n                m.remove();\n            this.models = [];\n        }\n\n        if (this.stopFlag){\n            this.stopFlag.cancel();\n            this.stopFlag = null;\n        }\n    }\n}","import { Vector2, Vector3 } from \"three\";\nimport { Renderer } from \"./renderer\";\nimport { Tile } from \"./tile\";\nimport { IVecBBox, ILayout, ILayer, IOverlay } from \"./types\";\n\n\nfunction getNthTriangularNumber(n: number) {\n    return (n * (n + 1)) / 2;\n}\n\n\nfunction toSpiral(x: number, y: number) {\n    let level = Math.max(Math.abs(x), Math.abs(y))\n\n    if (x === 0 && y === 0) {\n        return 0\n    }\n\n    let base = getNthTriangularNumber(level - 1) * 8;\n\n    if ((x > Math.abs(y)) || (x === y && x > 0)) {\n        return base + level + y;\n    } else if (((y > Math.abs(x)) || (y === -x)) && (y > 0)) {\n        return base + (level * 4) - (level) - x;\n    } else if ((x < y) || ((x === y) && (x < 0))) {\n        return base + (level * 5) - y;\n    } else if ((y < x) || ((-y === x) && (y < 0))) {\n        return base + (level * 7) + x;\n    }\n    throw \"Cannot covert to 1D\";\n}\n\nfunction extend(a: IVecBBox, b: IVecBBox) {\n    a[0].min(b[0]);\n    a[1].max(b[1]);\n}\n\nfunction center(b: IVecBBox) {\n    return new Vector2((b[0].x + b[1].x) * 0.5, (b[0].y + b[1].y) * 0.5);\n}\n\nexport class Grid {\n    bbox: IVecBBox;\n    brect: [Vector2, Vector2];\n    focusPoint: Vector2;\n    renderer: Renderer;\n    tileSize: number;\n\n    tiles: Map<number, Tile>;\n    visible_radius: number;\n    visible: Set<Tile>;\n    visibleSwap: Set<Tile>;\n\n    readonly zero2: Vector2;\n\n    layer: ILayer | IOverlay;\n\n    constructor(data: ILayout, renderer: Renderer, layer: ILayer | IOverlay) {\n        this.tileSize = data.tile_size;\n        this.renderer = renderer;\n        this.layer = layer;\n\n        this.bbox = [new Vector3(Infinity, Infinity, Infinity), new Vector3(-Infinity, -Infinity, -Infinity)];\n        this.tiles = new Map<number, Tile>();\n        \n        this.createTiles(data, renderer, layer);\n        \n        this.brect = [new Vector2(this.bbox[0].x, this.bbox[0].y), new Vector2(this.bbox[1].x, this.bbox[1].y)];\n        this.focusPoint = center(this.bbox);\n        \n        this.visible_radius = 2000;\n        this.visibleSwap = new Set<Tile>();\n        this.visible = new Set<Tile>();\n        \n        this.zero2 = new Vector2();\n    }\n    \n    \n    private createTiles(data: ILayout, renderer: Renderer, layer: IOverlay | ILayer) {\n        for (const tiledata of data.tiles) {\n            let idx = toSpiral(tiledata.x, tiledata.y);\n            const tile = new Tile(tiledata, renderer, layer);\n            extend(this.bbox, tile.bbox);\n            this.tiles.set(idx, tile);\n        }\n    }\n\n    focus(fp: Vector2) {\n        const visibleTile = this.focusPoint.clone().divideScalar(this.tileSize).floor()\n        const nvisibleTile = fp.clone().sub(this.brect[0]).divideScalar(this.tileSize).floor();\n\n        if (!visibleTile.equals(nvisibleTile)) {\n            this.focusPoint = fp;\n            this.update_visibility()\n        } \n    }\n\n\n    update_visibility() {\n        const tmpVisible = this.visible;\n        this.visible = this.visibleSwap;\n        this.visibleSwap = tmpVisible;\n\n        const visibleTile = this.focusPoint.clone().divideScalar(this.tileSize).floor()\n\n        const trad = Math.ceil(this.visible_radius / this.tileSize);\n        const sid = visibleTile.clone().subScalar(trad);\n        const eid = visibleTile.clone().addScalar(trad + 1);\n\n        this.visible.clear();\n        for (let x = sid.x; x < eid.x; ++x) {\n            for (let y = sid.y; y < eid.y; ++y) {\n                let idx = toSpiral(x, y);\n                const tile = this.tiles.get(idx);\n                if (tile)\n                {\n                    tile.visible = true;\n                    this.visible.add(tile);\n                }\n            }\n        }\n\n        this.visibleSwap.forEach((tile: Tile) => {\n            if (!this.visible.has(tile)) {\n                tile.visible = false;\n            }\n        });\n    }\n}","import { Renderer } from \"./renderer\";\nimport { Grid } from \"./grid\";\nimport { ILayerData, IOverlayData, ILayerBaseData, ILayer, IOverlay } from \"./types\";\nimport { Vector2 } from \"three\";\n\n\n\nclass LayerBase implements ILayer {\n    name: string;\n    project: string;\n    renderer: Renderer;\n    grid: Grid | undefined; //undefined if the layer is not visible\n    \n    constructor(renderer: Renderer, project: string, data: ILayerBaseData) {\n        this.name = data.name;\n        this.project = project;\n        this.renderer = renderer;\n\n        if (this.renderer.style.layer(this.name).visible)\n            this.grid = new Grid(data.layout, renderer, this);\n    }\n    \n    focus(point: Vector2) {\n        if (this.grid)\n            this.grid.focus(point);\n    }\n}\n\nexport class Layer extends LayerBase{\n    size: number;\n    \n    constructor(renderer: Renderer, project: string, data: ILayerData) {\n        super(renderer, project, data);\n        this.size = data.size;\n        this.renderer.picker.registerLayer(this.name, this.size);\n        \n        if (this.grid)\n            this.renderer.focus(this.grid.focusPoint);\n    }\n\n}\n\nexport class Overlay extends LayerBase implements IOverlay{\n    source: string;\n    target: string;\n\n    constructor(renderer: Renderer, project: string, data: IOverlayData) {\n        super(renderer, project, data);\n        this.source = data.source;\n        this.target = data.target;\n\n        if (this.grid)\n            this.renderer.focus(this.grid.focusPoint);\n    }\n}\n\n","import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\n\nexport class MapControls extends OrbitControls {\n\n    constructor(camera: THREE.PerspectiveCamera, domElement: HTMLCanvasElement) {\n\n        camera.up = new THREE.Vector3(0, 0, 1);\n        super(camera, domElement);\n\n        this.screenSpacePanning = false; // pan orthogonal to world-space direction camera.up\n\n        this.mouseButtons.LEFT = THREE.MOUSE.PAN;\n        this.mouseButtons.RIGHT = THREE.MOUSE.ROTATE;\n\n        this.touches.ONE = THREE.TOUCH.PAN;\n        this.touches.TWO = THREE.TOUCH.DOLLY_ROTATE;\n\n        this.zoomSpeed = 0.5;\n        this.dampingFactor = 0.1;\n        this.enableDamping = true;\n        this.minDistance = 5;\n        this.minPolarAngle = 0.001;\n        //this.maxPolarAngle = Math.PI * 0.4;\n        this.update();\n    }\n}","import * as THREE from 'three';\n\n\nexport class GPUPickHelper {\n    pickingTexture: THREE.WebGLRenderTarget;\n    pixelBuffer: Uint8Array;\n    renderer: THREE.WebGLRenderer;\n\n    selected: number[];\n    id: number;\n\n    offsets: Map<string, [number, number]>;\n    maxOffest: number;\n\n\n    constructor(renderer: THREE.WebGLRenderer) {\n        // create a 1x1 pixel render target\n        this.pickingTexture = new THREE.WebGLRenderTarget(1, 1);\n        this.pixelBuffer = new Uint8Array(4);\n        this.renderer = renderer;\n        this.selected = [-1, -1, -1, -1];\n        this.id = -1;\n        this.offsets = new Map();\n        this.maxOffest = 0;\n    }\n\n    registerLayer(name: string, size: number) {\n        if (this.offsets.has(name))\n            console.error(`Registering layer ${name} twice.`);\n\n        this.offsets.set(name, [this.maxOffest, this.maxOffest + size]);\n        this.maxOffest += size;\n    }\n\n    offsetForLayer(name: string) {\n        if (!this.offsets.has(name))\n            console.error(`Layer ${name} was not registered into the picker.`);\n        let range = this.offsets.get(name);\n        if (range)\n            return range[0];\n        return 0;\n    }\n\n    layerAndOidForId(id: number) {\n        for (const [layer, range] of this.offsets.entries()) {\n            if (id >= range[0] && id < range[1])\n                return {\n                    layer: layer,\n                    oid: id - range[0]\n                };\n        }\n    }\n\n    pick(x: number, y: number, scene: THREE.Scene, camera: THREE.PerspectiveCamera) {\n        const { pickingTexture, pixelBuffer } = this;\n\n        // set the view offset to represent just a single pixel under the mouse\n        const pixelRatio = this.renderer.getPixelRatio();\n        camera.setViewOffset(\n            this.renderer.getContext().drawingBufferWidth,\n            this.renderer.getContext().drawingBufferHeight,\n            x * pixelRatio | 0,\n            y * pixelRatio | 0,\n            1,\n            1,\n        );\n        // render the scene\n        this.renderer.setRenderTarget(pickingTexture)\n        this.renderer.render(scene, camera);\n        this.renderer.setRenderTarget(null);\n\n        // clear the view offset so rendering returns to normal\n        camera.clearViewOffset();\n\n        //read the pixel\n        this.renderer.readRenderTargetPixels(\n            pickingTexture,\n            0,   // x\n            0,   // y\n            1,   // width\n            1,   // height\n            pixelBuffer);\n\n        this.selected = [pixelBuffer[0] / 255, pixelBuffer[1] / 255, pixelBuffer[2] / 255, pixelBuffer[3] / 255];\n        this.id = new DataView(pixelBuffer.buffer).getUint32(0, true);\n        return this.id;\n    }\n}","import * as THREE from 'three';\nimport { CSM } from 'three/examples/jsm/csm/CSM';\n\nexport const PHONG_SELECT_VERT = `\n#define PHONG\n\nvarying vec3 vViewPosition;\n\nuniform vec4 selectedID;\n\nattribute vec4 objectID;\nvarying float varyingObjectID;\n\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n    int marked = 1;\n\n    for(int i = 0; i < 4; ++i)\n        marked *= int(floor(selectedID[i] * 255.0 + 0.5) == floor(objectID[i] * 255.0 + 0.5));\n\n    varyingObjectID = float(marked);\n\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvViewPosition = - mvPosition.xyz;\n\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n`;\n\n\nexport const PHONG_SELECT_FRAG = `\n#define PHONG\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n\nvarying float varyingObjectID;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n    vec3 marked = vec3(0.5 * float(varyingObjectID > 0.5));\n\n\tvec4 diffuseColor = vec4( diffuse + marked, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n`;\n\n\nexport function polygonSelectMaterial() {\n\n\tconst customUniforms = THREE.UniformsUtils.merge([\n\t\tTHREE.ShaderLib.phong.uniforms,\n\t\t{ selectedID: { value: [-1, -1, -1, -1] } }\n\t]);\n\n\treturn new THREE.ShaderMaterial({\n\t\tuniforms: customUniforms,\n\t\tvertexShader: PHONG_SELECT_VERT,\n\t\tfragmentShader: PHONG_SELECT_FRAG,\n\t\tlights: true,\n\t\tside: THREE.DoubleSide,\n\t\tname: 'custom-polygon-material'\n\t});\n}\n\nexport function polygonMaterial() {\n\treturn new THREE.MeshPhongMaterial({\n\t\tside: THREE.DoubleSide,\n\t});\n}\n\nexport const PHONG_LINE_VERT = `\n#define PHONG\n\nvarying vec3 vViewPosition;\n\nattribute vec3 lineStart;\nattribute vec3 lineEnd;\nuniform float zoffset;\n\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\n/**\n * Create rotation matrix from field vector.\n * The returned matrix can rotate vector (1, 0, 0)\n * into the desired setup.\n */\nmat4 getRotationMat(vec3 vector)\n{\n\tvec3 unit = vec3(1, 0, 0);\n\tvec3 f = normalize(vector);\n\tvec3 cross = cross(f, unit);\n\tvec3 a = normalize(cross);\n\tfloat s = length(cross);\n\tfloat c = dot(f, unit);\n\tfloat oc = 1.0 - c;\n\treturn mat4(oc * a.x * a.x + c,        oc * a.x * a.y - a.z * s,  oc * a.z * a.x + a.y * s,  0.0,\n                oc * a.x * a.y + a.z * s,  oc * a.y * a.y + c,        oc * a.y * a.z - a.x * s,  0.0,\n                oc * a.z * a.x - a.y * s,  oc * a.y * a.z + a.x * s,  oc * a.z * a.z + c,        0.0,\n                0.0,                       0.0,                       0.0,                       1.0);\n\n}\n\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\n\t#include <begin_vertex>\n\n\tvec3 dir = lineEnd - lineStart;\n    float dist = length(dir);\n    mat4 rot = getRotationMat(dir);\n\n\tconst float thickness = 1.0;\n\tfloat end = float(transformed.x >= 0.9);\n\ttransformed.x = end * (dist - 1.0 + transformed.x) + (1.0 - end) * transformed.x; //subtract one because its the original length of the template line\n\ttransformed.y *= thickness;\n\n    transformed = lineStart + (rot * vec4(transformed, 1.0)).xyz;\n\ttransformed.z += zoffset;\n\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvViewPosition = - mvPosition.xyz;\n\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n`;\n\n\nexport const PHONG_LINE_FRAG = `\n#define PHONG\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\t//#include <lights_phong_fragment>\n\t//#include <lights_fragment_begin>\n\t//#include <lights_fragment_maps>\n\t//#include <lights_fragment_end>\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n`;\n\n\nexport function lineMaterial() {\n\n\tconst customUniforms = THREE.UniformsUtils.merge([\n\t\t//THREE.ShaderLib.phong.uniforms,\n\t\t{ zoffset: { value: 1 } }\n\t]);\n\n\treturn new THREE.ShaderMaterial({\n\t\tuniforms: customUniforms,\n\t\tvertexShader: PHONG_LINE_VERT,\n\t\tfragmentShader: PHONG_LINE_FRAG,\n\t\tside: THREE.DoubleSide,\n\t\t//lights: true,\n\t\tname: 'custom-line-material'\n\t});\n}\n\nexport const PICK_VERT = `\nattribute vec4 objectID;\nvarying vec4 objectIDColor;\n\nvoid main() {\n    objectIDColor = objectID;\n    gl_Position = projectionMatrix * (modelViewMatrix * vec4( position, 1.0 ));\n}\n`;\n\n\nexport const PICK_FRAG = `\nvarying vec4 objectIDColor;\n\nvoid main() {\n\tgl_FragColor = vec4(objectIDColor);\n}\n`;\n\n\nexport function pickingMaterial() {\n\n\tconst customUniforms = THREE.UniformsUtils.merge([]);\n\n\treturn new THREE.ShaderMaterial({\n\t\tuniforms: customUniforms,\n\t\tvertexShader: PICK_VERT,\n\t\tfragmentShader: PICK_FRAG,\n\t\tside: THREE.DoubleSide,\n\t\tname: 'custom-picking-material'\n\t});\n}\n\n\nexport class MaterialLibrary {\n\tpolygonMaterial: THREE.Material;\n    polygonSelectMaterial: THREE.ShaderMaterial;\n    lineMaterial: THREE.Material;\n    pickingMaterial: THREE.Material;\n\n\tconstructor(csm: CSM) {\n        this.polygonMaterial = polygonMaterial();\n        csm.setupMaterial(this.polygonMaterial);\n        \n\t\tthis.polygonSelectMaterial = polygonSelectMaterial();\n        csm.setupMaterial(this.polygonSelectMaterial);\n\n        this.lineMaterial = lineMaterial();\n        this.pickingMaterial = pickingMaterial();\n\t}\n}","\n\nclass LayerStyle {\n    visible: boolean = true;\n    constructor(settings: any = {}) {\n        this.apply(settings);\n    }\n\n    apply(settings: any) {\n        for (let key in this){\n            if (settings[key] !== undefined)\n                this[key] = settings[key];\n        }\n    }\n}\n\nexport class Style {\n    private style: any;\n\n    constructor(styles: any) {\n        this.style = styles;\n    }\n\n    layer(name: string){\n        const layerStyle = this.style[name];\n        if (layerStyle)\n            return new LayerStyle(layerStyle);\n        return new LayerStyle()\n    }\n}","import * as THREE from 'three';\nimport { CSM } from 'three/examples/jsm/csm/CSM';\nimport Stats from 'three/examples/jsm/libs/stats.module';\nimport { MapControls } from './controls';\nimport { GPUPickHelper } from './picker';\nimport { MaterialLibrary } from './shaders';\nimport { Style } from './style';\n\n\nexport class Renderer {\n    canvas: HTMLCanvasElement;\n    scene: THREE.Scene;\n    pickingScene: THREE.Scene;\n    renderer: THREE.WebGLRenderer;\n    camera: THREE.PerspectiveCamera;\n    controls: MapControls;\n    csm!: CSM;\n\n    picker: GPUPickHelper;\n    style: Style;\n\n    matlib: MaterialLibrary;\n\n    stats1: Stats;\n    stats2: Stats;\n    changed: boolean;\n\n    constructor(canvas: HTMLCanvasElement) {\n        this.canvas = canvas;\n        this.scene = new THREE.Scene();\n        this.pickingScene = new THREE.Scene();\n        this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 5000);\n\n        this.renderer = new THREE.WebGLRenderer({ canvas: this.canvas, antialias: true });\n        this.setupRenderer();\n        this.controls = new MapControls(this.camera, this.canvas);\n        this.setupLightsAndShadows();\n\n        //materials\n        this.matlib = new MaterialLibrary(this.csm);\n\n        this.style = new Style({\n            DOP_TSK_UlicUsPAKOM_l: {\n                visible: false,\n            }\n        });\n\n        //picker\n        this.picker = new GPUPickHelper(this.renderer);\n        this.changed = true;\n\n        //devstats\n        this.stats1 = Stats();\n        this.stats1.showPanel(0);\n        this.stats1.dom.style.cssText = 'position:absolute;top:0px;left:0px;';\n        document.body.appendChild(this.stats1.dom);\n        this.stats2 = Stats();\n        this.stats2.showPanel(1);\n        this.stats2.dom.style.cssText = 'position:absolute;top:0px;left:80px;';\n        document.body.appendChild(this.stats2.dom);\n    }\n\n\n    private setupLightsAndShadows() {\n        this.scene.add(new THREE.HemisphereLight(0xdddddd, 0x555555, 0.6));\n        this.scene.add(new THREE.AmbientLight(0xFFFFFF, 0.2));\n\n        this.csm = new CSM({\n            fade: true,\n            mode: 'practical',\n            cascades: 4,\n            near: 1,\n            far: 5000,\n            shadowBias: -0.0005,\n            shadowMapSize: 2048,\n            lightDirection: new THREE.Vector3(-1, -1, -2).normalize(),\n            camera: this.camera,\n            parent: this.scene,\n            margin: 5000,\n            lightFar: 20000,\n            lightNear: 1,\n            lightIntensity: 0.3\n        });\n    }\n\n    private setupRenderer() {\n        this.renderer.setPixelRatio(window.devicePixelRatio);\n        this.renderer.shadowMap.enabled = true;\n        this.renderer.shadowMap.autoUpdate = false;\n        this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n\n        this.renderer.setClearColor(0xFFFFFF);\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n        this.renderer.setAnimationLoop(() => this.frame());\n    }\n\n    frame() {\n        this.controls.update();\n\n        if (this.changed) {\n            this.csm.update();\n            this.renderer.shadowMap.needsUpdate = true;\n            this.renderer.render(this.scene, this.camera);\n        }\n\n        this.stats1.update()\n        this.stats2.update()\n        this.changed = false;\n    }\n\n    focus(focusPoint: THREE.Vector2) {\n        this.controls.target = new THREE.Vector3(focusPoint.x, focusPoint.y, 0);\n        this.camera.position.x = focusPoint.x;\n        this.camera.position.y = focusPoint.y - 20;\n        this.camera.position.z = 1000;\n    }\n\n    click(x: number, y: number) {\n        const id = this.picker.pick(x, y, this.pickingScene, this.camera);\n        console.log(id);\n        console.log(this.picker.layerAndOidForId(id));\n\n        this.matlib.polygonSelectMaterial.uniforms.selectedID = { value: this.picker.selected };\n        this.matlib.polygonSelectMaterial.uniformsNeedUpdate = true;\n        this.changed = true;\n    }\n\n    get focus_point() {\n        return this.controls.target;\n    }\n}","import { Vector2 } from \"three\";\nimport iaxios from \"../axios\";\nimport { Layer, Overlay } from \"./layer\";\nimport { Renderer } from \"./renderer\";\nimport { ILayer } from \"./types\";\n\n\nexport class MetacityEngine {\n    project: string;\n    canvas: HTMLCanvasElement;\n    \n    renderer: Renderer;\n    layers: ILayer[];\n\n    constructor(project: string, canvas: HTMLCanvasElement) {\n        this.project = project;\n        this.canvas = canvas;\n        this.renderer = new Renderer(this.canvas);\n        this.layers = [];\n    }\n\n    init() {\n        iaxios.get(`/api/data/${this.project}/layout.json`).then((response) => {\n            for (const layer of response.data)\n            {\n                if(!layer.init)\n                    continue;\n                \n                if (layer.type === \"layer\")\n                    this.layers.push(new Layer(this.renderer, this.project, layer));\n                if (layer.type === \"overlay\")\n                    this.layers.push(new Overlay(this.renderer, this.project, layer));\n\n            }\n        });\n\n        this.renderer.controls.addEventListener('change', () => this.moved())\n    }\n\n    moved() {\n        const fp = this.renderer.focus_point\n        const fp2 = new Vector2(fp.x, fp.y);\n        for (let layer of this.layers) {\n            layer.focus(fp2);\n        }\n        this.renderer.changed = true;\n    }\n\n    doubleclick(x: number, y: number) {\n        this.renderer.click(x, y);\n    }\n\n    exit() {\n        \n    }\n}","import { useEffect, createRef } from \"react\"\nimport { useParams } from \"react-router\"\nimport { MetacityEngine } from \"../engine/engine\"\n\n\nexport function View() {\n    const { project_name } = useParams<{project_name: string}>();\n    const canvas = createRef<HTMLCanvasElement>();\n    let renderer: MetacityEngine;\n    \n    useEffect(() => {\n        if (canvas.current == null)\n            return;\n        \n        renderer = new MetacityEngine(project_name, canvas.current);\n        renderer.init();\n        renderer.renderer.frame();\n\n        return function cleanup() {\n            renderer.exit();\n            window.location.reload();\n          };\n\n      }, [canvas, project_name]);\n\n\n    return (\n        <div>\n            <canvas ref={canvas} onDoubleClick={(event) => renderer.doubleclick(event.clientX, event.clientY)}>Your browser does not support HTML5 canvas</canvas>\n        </div>\n    )\n}","import React from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\"\nimport './style.css'\nimport 'react-toastify/dist/ReactToastify.css';\nimport { url } from './url'\nimport { Home } from './screens/home'\nimport { Projects } from './screens/projects'\nimport { Login } from './screens/login'\nimport { UploadLayer } from './screens/upload'\nimport { Jobs } from './screens/jobs'\nimport { View } from './screens/view'\nimport { ToastContainer, toast } from 'react-toastify';\n\nexport function App() {\n  return (\n    <Router>\n      <ToastContainer\n        position=\"top-center\"\n        autoClose={10000}\n        hideProgressBar={false}\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        //draggable\n        pauseOnHover\n      />\n      <Switch>\n        <Route exact path={[\"/\"]}>\n          <Redirect to=\"/app\" />\n        </Route>\n        <Route path={url.LOGIN}>\n          <Login />\n        </Route>\n        <Route path={url.UPLOADLAYERTEMPLATE}>\n          <UploadLayer />\n        </Route>\n        <Route path={url.PROJECTSTEMPLATE}>\n          <Projects />\n        </Route>\n        <Route path={url.JOBS}>\n          <Jobs />\n        </Route>\n        <Route path={url.VIEWTEMPLATE}>\n          <View />\n        </Route>\n        <Route path={url.HOME}>\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n  )\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { IconContext } from 'react-icons/lib'\nimport { App } from './app'\n\nReactDOM.render(\n  <React.StrictMode>\n    <IconContext.Provider value={{ className: 'react-icons' }}>\n      <App /> \n      </IconContext.Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}